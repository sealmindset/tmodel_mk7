<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reset Password</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/main.css">
  
  <style>
    body {
      padding-top: 20px;
    }
    .password-form {
      max-width: 500px;
      margin: 0 auto;
      padding: 20px;
      border: 1px solid #ddd;
      border-radius: 8px;
      background-color: #fff;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="row">
      <div class="col-md-12">
        <div class="password-form mt-5">
          <h2 class="mb-4 text-center">Reset Password</h2>
          
          <form id="passwordResetForm">
            <input type="hidden" id="userEmail" name="email" value="<%= email %>">
            
            <div class="mb-3">
              <p>Reset password for: <strong><%= email %></strong></p>
            </div>
            
            <div class="mb-3">
              <label for="newPassword" class="form-label">New Password</label>
              <div class="input-group">
                <input type="password" class="form-control" id="newPassword" name="newPassword" required>
                <button class="btn btn-outline-secondary" type="button" id="toggleNewPassword">
                  <i class="bi bi-eye"></i>
                </button>
              </div>
              <div class="form-text">Password must be at least 8 characters.</div>
            </div>
            
            <div class="mb-3">
              <label for="confirmPassword" class="form-label">Confirm Password</label>
              <div class="input-group">
                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                <button class="btn btn-outline-secondary" type="button" id="toggleConfirmPassword">
                  <i class="bi bi-eye"></i>
                </button>
              </div>
            </div>
            
            <div class="d-grid gap-2">
              <button type="submit" class="btn btn-primary">Reset Password</button>
              <a href="/" class="btn btn-secondary">Cancel</a>
            </div>
          </form>
          
          <div id="result" class="mt-4 d-none">
            <div class="alert" role="alert"></div>
          </div>
          
          <div id="verificationSection" class="mt-4 text-center d-none">
            <button type="button" class="btn btn-success" id="verifyBtn">
              <i class="bi bi-check-circle me-1"></i>Verify Password Change
            </button>
            <div id="verificationResult" class="mt-3 d-none">
              <div class="alert" role="alert"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Focus on the first input field
      document.getElementById('newPassword').focus();
      
      // Password toggle visibility
      function setupPasswordToggle(inputId, toggleId) {
        const passwordInput = document.getElementById(inputId);
        const toggleButton = document.getElementById(toggleId);
        
        toggleButton.addEventListener('click', function() {
          const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
          passwordInput.setAttribute('type', type);
          
          const icon = toggleButton.querySelector('i');
          if (type === 'text') {
            icon.classList.remove('bi-eye');
            icon.classList.add('bi-eye-slash');
          } else {
            icon.classList.remove('bi-eye-slash');
            icon.classList.add('bi-eye');
          }
        });
      }
      
      setupPasswordToggle('newPassword', 'toggleNewPassword');
      setupPasswordToggle('confirmPassword', 'toggleConfirmPassword');
      
      // Form submission
      document.getElementById('passwordResetForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const email = document.getElementById('userEmail').value;
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        
        // Basic validation
        if (!newPassword || newPassword.length < 8) {
          showAlert('Password must be at least 8 characters', 'danger');
          return;
        }
        
        if (newPassword !== confirmPassword) {
          showAlert('Passwords do not match', 'danger');
          return;
        }
        
        // Disable the button and show loading state
        const submitBtn = document.querySelector('button[type="submit"]');
        const originalBtnText = submitBtn.innerHTML;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';
        
        // Send reset request
        fetch('/reset-password', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            email,
            newPassword,
            confirmPassword
          })
        })
        .then(response => response.json())
        .then(data => {
          // Reset button state
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalBtnText;
          
          if (data.success) {
            showAlert(data.message, 'success');
            
            // Show verification section
            const verificationSection = document.getElementById('verificationSection');
            verificationSection.classList.remove('d-none');
            
            // Set up verification button
            const verifyBtn = document.getElementById('verifyBtn');
            verifyBtn.setAttribute('data-email', email);
            verifyBtn.setAttribute('data-timestamp', data.verification.timestamp);
            
            // Clear password fields
            document.getElementById('newPassword').value = '';
            document.getElementById('confirmPassword').value = '';
          } else {
            showAlert(data.error, 'danger');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          // Reset button state
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalBtnText;
          
          showAlert('An error occurred while processing your request', 'danger');
        });
      });
      
      // Verification button
      document.getElementById('verifyBtn').addEventListener('click', function() {
        const verifyBtn = this;
        const email = verifyBtn.getAttribute('data-email');
        const timestamp = verifyBtn.getAttribute('data-timestamp');
        
        if (!email || !timestamp) {
          showVerificationAlert('Verification data is missing', 'danger');
          return;
        }
        
        // Send verification request
        fetch(`/verify-password-reset?email=${encodeURIComponent(email)}&timestamp=${encodeURIComponent(timestamp)}`)
          .then(response => response.json())
          .then(data => {
            const resultContainer = document.getElementById('verificationResult');
            resultContainer.classList.remove('d-none');
            
            const resultAlert = resultContainer.querySelector('.alert');
            if (data.success) {
              resultAlert.className = 'alert alert-success';
              resultAlert.innerHTML = `
                <h5><i class="bi bi-check-circle-fill me-2"></i>Verification Successful</h5>
                <p>${data.message}</p>
                <p class="mb-0 mt-3"><a href="/" class="btn btn-outline-primary btn-sm">Return to Dashboard</a></p>
              `;
            } else {
              resultAlert.className = 'alert alert-danger';
              resultAlert.innerHTML = `
                <h5><i class="bi bi-exclamation-triangle-fill me-2"></i>Verification Failed</h5>
                <p>${data.error}</p>
              `;
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showVerificationAlert('An error occurred while verifying the password change', 'danger');
          });
      });
      
      // Helper functions
      function showAlert(message, type = 'info') {
        const resultContainer = document.getElementById('result');
        resultContainer.classList.remove('d-none');
        
        const alert = resultContainer.querySelector('.alert');
        alert.className = `alert alert-${type}`;
        alert.textContent = message;
      }
      
      function showVerificationAlert(message, type = 'info') {
        const resultContainer = document.getElementById('verificationResult');
        resultContainer.classList.remove('d-none');
        
        const alert = resultContainer.querySelector('.alert');
        alert.className = `alert alert-${type}`;
        alert.textContent = message;
      }
    });
  </script>
</body>
</html>
