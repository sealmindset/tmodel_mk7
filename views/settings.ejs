<!DOCTYPE html>
<html lang="en">
<%- include('./partials/header.ejs') %>

<style>
  /* Custom styles for status indicators */
  .status-indicator {
    display: inline-block;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin-left: 8px;
  }
  
  .status-indicator.online {
    background-color: #28a745;
    box-shadow: 0 0 5px #28a745;
  }
  
  .status-indicator.offline {
    background-color: #dc3545;
    box-shadow: 0 0 5px #dc3545;
  }
  
  .status-indicator.pending {
    background-color: #ffc107;
    box-shadow: 0 0 5px #ffc107;
  }
  
  /* Form toggle switch styling */
  .toggle-switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
  }
  
  .toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }
  
  .toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 34px;
  }
  
  .toggle-slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
  }
  
  input:checked + .toggle-slider {
    background-color: #2196F3;
  }
  
  input:checked + .toggle-slider:before {
    transform: translateX(26px);
  }
  
  .toggle-label {
    margin-left: 10px;
    font-weight: 500;
  }
  
  /* Tab styling */
  .nav-tabs .nav-link {
    border: 1px solid transparent;
    border-top-left-radius: 0.25rem;
    border-top-right-radius: 0.25rem;
    color: #6c757d;
  }
  
  .nav-tabs .nav-link.active {
    color: #495057;
    background-color: #fff;
    border-color: #dee2e6 #dee2e6 #fff;
  }
  
  .card.border-top-0 {
    border-top: 0;
  }
  
  /* Password toggle */
  .password-toggle {
    cursor: pointer;
  }
  
  /* File upload styling */
  .border-dashed {
    border-style: dashed !important;
  }
  
  .file-upload-area {
    position: relative;
    width: 100%;
    cursor: pointer;
  }
  
  .file-upload-area:hover .border-dashed {
    border-color: #0d6efd !important;
  }
  
  /* Swagger UI container styling */
  #rapid7-swagger-ui .swagger-ui .wrapper {
    padding: 0;
  }
  
  #rapid7-swagger-ui .swagger-ui .info {
    margin: 20px 0;
  }
  
  /* Responsive card sizing */
  @media (max-width: 768px) {
    .card-body {
      padding: 1rem;
    }
  }
</style>

<div class="container mt-4">
  <h1>Settings</h1>
  
  <% if (typeof message !== 'undefined' && message) { %>
    <div class="alert alert-<%= message.type %> alert-dismissible fade show" role="alert">
      <%= message.text %>
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  <% } %>
  
  <!-- Nav tabs -->
  <ul class="nav nav-tabs" id="settingsTabs" role="tablist">
    <li class="nav-item" role="presentation">
      <button class="nav-link active" id="llm-provider-tab" data-bs-toggle="tab" data-bs-target="#llm-provider" type="button" role="tab" aria-controls="llm-provider" aria-selected="true">
        LLM Provider
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="openai-tab" data-bs-toggle="tab" data-bs-target="#openai" type="button" role="tab" aria-controls="openai" aria-selected="false">
        OpenAI API
        <span class="status-indicator <%= typeof openaiStatus !== 'undefined' && openaiStatus ? 'online' : 'offline' %>"></span>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="ollama-tab" data-bs-toggle="tab" data-bs-target="#ollama" type="button" role="tab" aria-controls="ollama" aria-selected="false">
        Ollama API
        <span class="status-indicator <%= typeof ollamaStatus !== 'undefined' && ollamaStatus ? 'online' : 'offline' %>"></span>
      </button>
    </li>
    <li class="nav-item" role="presentation">
      <button class="nav-link" id="rapid7-tab" data-bs-toggle="tab" data-bs-target="#rapid7" type="button" role="tab" aria-controls="rapid7" aria-selected="false">
        Rapid7 API
        <span class="status-indicator <%= typeof rapid7Status !== 'undefined' && rapid7Status ? 'online' : 'offline' %>"></span>
      </button>
    </li>
  </ul>
  
  <!-- Tab content -->
  <div class="tab-content" id="settingsTabContent">
    <!-- LLM Provider Tab -->
    <div class="tab-pane fade show active" id="llm-provider" role="tabpanel" aria-labelledby="llm-provider-tab">
      <div class="card border-top-0 rounded-top-0">
        <div class="card-body">
          <h5 class="card-title">LLM Provider Selection</h5>
          <p class="card-text">Choose which Language Model provider to use for AI-powered features. Only one provider can be active at a time.</p>
          
          <form id="llm-provider-form" action="/settings" method="POST">
            <input type="hidden" name="settingsType" value="llm">
            
            <div class="row mb-4">
              <div class="col-md-6">
                <div class="card">
                  <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                      <div>
                        <h6 class="mb-1">OpenAI</h6>
                        <p class="text-muted mb-0 small">Use OpenAI's GPT models</p>
                      </div>
                      <label class="toggle-switch">
                        <input type="radio" name="llmProvider" value="openai" id="openai-toggle" <%= (typeof llmProvider === 'undefined' || llmProvider === 'openai') ? 'checked' : '' %>>
                        <span class="toggle-slider"></span>
                      </label>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="col-md-6">
                <div class="card">
                  <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                      <div>
                        <h6 class="mb-1">Ollama</h6>
                        <p class="text-muted mb-0 small">Use local Ollama models</p>
                      </div>
                      <label class="toggle-switch">
                        <input type="radio" name="llmProvider" value="ollama" id="ollama-toggle" <%= (typeof llmProvider !== 'undefined' && llmProvider === 'ollama') ? 'checked' : '' %>>
                        <span class="toggle-slider"></span>
                      </label>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="alert alert-info">
              <i class="fas fa-info-circle me-2"></i>
              Your selection overrides the default setting in the .env file. Config will be stored in Redis for fast access.
            </div>
            
            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
              <button type="submit" class="btn btn-primary">Save Provider Selection</button>
            </div>
          </form>
        </div>
      </div>
    </div>
    
    <!-- OpenAI Tab -->
    <div class="tab-pane fade" id="openai" role="tabpanel" aria-labelledby="openai-tab">
      <div class="card border-top-0 rounded-top-0">
        <div class="card-body">
          <h5 class="card-title">OpenAI API Configuration</h5>
          <p class="card-text">Configure your OpenAI API credentials and model preferences.</p>
          
          <div class="d-flex align-items-center mb-3">
            <div class="me-2">Status:</div> 
            <div class="status-indicator <%= typeof openaiStatus !== 'undefined' && openaiStatus ? 'online' : 'offline' %>" 
                 id="openai-status-indicator"
                 title="OpenAI API: <%= typeof openaiStatus !== 'undefined' && openaiStatus ? 'Connected' : 'Disconnected' %>"></div>
            <span id="openai-status-text" class="ms-2 <%= typeof openaiStatus !== 'undefined' && openaiStatus ? 'text-success' : 'text-danger' %>">
              <%= typeof openaiStatus !== 'undefined' && openaiStatus ? 'Connected' : 'Disconnected' %>
            </span>
          </div>
          
          <form id="openai-settings-form" action="/settings" method="POST">
            <input type="hidden" name="settingsType" value="openai">
            
            <div class="mb-3">
              <label for="openai-api-key" class="form-label">API Key</label>
              <div class="input-group">
                <input type="password" class="form-control" id="openai-api-key" name="openaiApiKey" value="<%= openaiApiKey || '' %>" placeholder="sk-...">
                <button class="btn btn-outline-secondary password-toggle" type="button" data-target="openai-api-key">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
              <div class="form-text">Your OpenAI API key is stored securely and never exposed.</div>
            </div>
            
            <div class="mb-3">
              <label for="openai-model" class="form-label">Model</label>
              <select class="form-select" id="openai-model" name="openaiModel">
                <option value="gpt-4" <%= (typeof openaiModel !== 'undefined' && openaiModel === 'gpt-4') ? 'selected' : '' %>>GPT-4</option>
                <option value="gpt-4-turbo" <%= (typeof openaiModel !== 'undefined' && openaiModel === 'gpt-4-turbo') ? 'selected' : '' %>>GPT-4 Turbo</option>
                <option value="gpt-3.5-turbo" <%= (typeof openaiModel === 'undefined' || openaiModel === 'gpt-3.5-turbo') ? 'selected' : '' %>>GPT-3.5 Turbo</option>
              </select>
              <div class="form-text">Choose the default model to use for AI features.</div>
            </div>
            
            <div class="d-flex gap-2">
              <button type="submit" class="btn btn-primary">Save Settings</button>
              <button type="button" class="btn btn-outline-secondary" id="test-openai-connection">Test Connection</button>
              <div id="test-openai-result" class="ms-2 d-flex align-items-center"></div>
            </div>
          </form>
        </div>
      </div>
    </div>
    
    <!-- Ollama Tab -->
    <div class="tab-pane fade" id="ollama" role="tabpanel" aria-labelledby="ollama-tab">
      <div class="card border-top-0 rounded-top-0">
        <div class="card-body">
          <h5 class="card-title">Ollama API Configuration</h5>
          <p class="card-text">Configure your Ollama API connection and model preferences.</p>
          <div class="d-flex align-items-center mb-3">
            <div class="me-2">Status:</div> 
            <div class="status-indicator <%= typeof ollamaStatus !== 'undefined' && ollamaStatus ? 'online' : 'offline' %>" 
                 id="ollama-status-indicator"
                 title="Ollama API: <%= typeof ollamaStatus !== 'undefined' && ollamaStatus ? 'Connected' : 'Disconnected' %>"></div>
            <span id="ollama-status-text" class="ms-2 <%= typeof ollamaStatus !== 'undefined' && ollamaStatus ? 'text-success' : 'text-danger' %>">
              <%= typeof ollamaStatus !== 'undefined' && ollamaStatus ? 'Connected' : 'Disconnected' %>
            </span>
          </div>
          <form id="ollama-settings-form" action="/settings" method="POST">
            <input type="hidden" name="settingsType" value="ollama">
            <div class="mb-3">
              <label for="ollama-api-url" class="form-label">API URL</label>
              <input type="text" class="form-control" id="ollama-api-url" name="ollamaApiUrl" value="<%= ollamaApiUrl || 'http://localhost:11434' %>" placeholder="http://localhost:11434">
              <div class="form-text">The base URL for your Ollama API endpoint.</div>
            </div>
            <div class="mb-3">
              <label for="ollama-model" class="form-label">Model</label>
              <select class="form-select" id="ollama-model" name="ollamaModel">
                <option value="llama3" <%= (typeof ollamaModel === 'undefined' || ollamaModel === 'llama3' || ollamaModel === 'llama3:latest') ? 'selected' : '' %>>Llama 3</option>
                <option value="llama3.1" <%= (typeof ollamaModel !== 'undefined' && (ollamaModel === 'llama3.1' || ollamaModel === 'llama3.1:latest')) ? 'selected' : '' %>>Llama 3.1</option>
                <option value="llama3.3:latest" <%= (typeof ollamaModel !== 'undefined' && (ollamaModel === 'llama3.3' || ollamaModel === 'llama3.3:latest')) ? 'selected' : '' %>>Llama 3.3</option>
                <option value="mistral" <%= (typeof ollamaModel !== 'undefined' && (ollamaModel === 'mistral' || ollamaModel === 'mistral:latest')) ? 'selected' : '' %>>Mistral</option>
                <option value="gemma" <%= (typeof ollamaModel !== 'undefined' && (ollamaModel === 'gemma' || ollamaModel === 'gemma:latest')) ? 'selected' : '' %>>Gemma</option>
              </select>
              <div class="form-text">Choose the default model to use for AI features.</div>
            </div>
            <div class="alert alert-info">
              <i class="fas fa-info-circle me-2"></i>
              Your Ollama configuration will be stored in PostgreSQL and cached in Redis for optimal performance.
            </div>
            <div class="d-flex gap-2">
              <button type="submit" class="btn btn-primary">Save Settings</button>
              <button type="button" class="btn btn-outline-secondary" id="test-ollama-connection">Test Connection</button>
              <div id="test-ollama-result" class="ms-2 d-flex align-items-center"></div>
            </div>
          </form>
        </div>
      </div>
    </div>
    
    <!-- Rapid7 Tab -->
    <div class="tab-pane fade" id="rapid7" role="tabpanel" aria-labelledby="rapid7-tab">
      <div class="card border-top-0 rounded-top-0">
        <div class="card-body">
          <h5 class="card-title">Rapid7 API Configuration</h5>
          <p class="card-text">Configure your Rapid7 API credentials and OpenAPI specification for vulnerability scanning.</p>
          <div class="d-flex align-items-center mb-3">
            <div class="me-2">Status:</div> 
            <div class="status-indicator <%= typeof rapid7Status !== 'undefined' && rapid7Status ? 'online' : 'offline' %>" 
                 id="rapid7-status-indicator"
                 title="Rapid7 API: <%= typeof rapid7Status !== 'undefined' && rapid7Status ? 'Connected' : 'Disconnected' %>"></div>
            <span id="rapid7-status-text" class="ms-2 <%= typeof rapid7Status !== 'undefined' && rapid7Status ? 'text-success' : 'text-danger' %>">
              <%= typeof rapid7Status !== 'undefined' && rapid7Status ? 'Connected' : 'Disconnected' %>
            </span>
          </div>
          <form id="rapid7-settings-form" action="/settings" method="POST" enctype="multipart/form-data">
            <input type="hidden" name="settingsType" value="rapid7">
            <div class="mb-3">
              <label for="rapid7-api-key" class="form-label">API Key</label>
              <div class="input-group">
                <input type="password" class="form-control" id="rapid7-api-key" name="rapid7ApiKey" value="<%= rapid7ApiKey || '' %>" placeholder="Enter your Rapid7 API key">
                <button class="btn btn-outline-secondary password-toggle" type="button" data-target="rapid7-api-key">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
              <div class="form-text">Your Rapid7 API key is stored securely and never exposed.</div>
            </div>
            <div class="mb-3">
              <label for="rapid7-openapi-file" class="form-label">OpenAPI Specification</label>
              <div class="card p-3 bg-light">
                <div class="file-upload-container">
                  <div class="file-upload-area" id="rapid7-file-dropzone">
                    <input type="file" class="file-input d-none" id="rapid7-openapi-file" name="rapid7OpenApiFile" accept=".json,.yaml,.yml">
                    <div class="text-center p-5 border-2 border-dashed rounded" id="rapid7-file-dropzone-text">
                      <i class="fas fa-cloud-upload-alt fa-3x mb-3 text-muted"></i>
                      <p class="mb-1">Drag and drop your OpenAPI specification file here</p>
                      <p class="text-muted small">or</p>
                      <button type="button" class="btn btn-outline-primary" id="rapid7-file-select-btn">Browse files</button>
                      <p class="mt-2 small text-muted">Accepted formats: JSON, YAML</p>
                    </div>
                    <div class="selected-file-info d-none p-3" id="rapid7-selected-file-info">
                      <div class="d-flex align-items-center">
                        <i class="fas fa-file-code fa-2x text-primary me-3"></i>
                        <div class="flex-grow-1">
                          <h6 class="mb-0" id="rapid7-selected-filename"></h6>
                          <span class="text-muted small" id="rapid7-selected-filesize"></span>
                        </div>
                        <button type="button" class="btn-close" id="rapid7-file-remove-btn" aria-label="Remove file"></button>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="mt-2 small text-muted">
                  <% if (typeof rapid7SpecAvailable !== 'undefined' && rapid7SpecAvailable) { %>
                    <div class="text-success">
                      <i class="fas fa-check-circle"></i> OpenAPI specification is already uploaded.
                      <button type="button" class="btn btn-sm btn-link p-0 ms-2" id="rapid7-file-view-btn">View</button>
                    </div>
                  <% } else { %>
                    <div class="text-muted">
                      <i class="fas fa-info-circle"></i> No OpenAPI specification uploaded yet.
                    </div>
                  <% } %>
                </div>
              </div>
            </div>
            <div class="mb-4">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" id="rapid7-default-server" name="rapid7UseSpecServerUrl" <%= typeof rapid7UseSpecServerUrl !== 'undefined' && rapid7UseSpecServerUrl ? 'checked' : '' %>>
                <label class="form-check-label" for="rapid7-default-server">
                  Use the server URL defined in the OpenAPI specification as the default
                </label>
              </div>
            </div>
            <div class="alert alert-info">
              <i class="fas fa-info-circle me-2"></i>
              Your Rapid7 configuration will be stored in PostgreSQL and cached in Redis for optimal performance.
              The API Key overrides the setting in the .env file.
            </div>
            <div class="swagger-ui-container mb-4">
              <h6>OpenAPI Specification Preview</h6>
              <div id="rapid7-swagger-ui" class="border rounded overflow-hidden" style="height: 400px; display: none;"></div>
              <div id="rapid7-swagger-placeholder" class="border rounded d-flex align-items-center justify-content-center" style="height: 400px;">
                <div class="text-center text-muted">
                  <i class="fas fa-file-code fa-3x mb-3"></i>
                  <p>OpenAPI specification preview will appear here after uploading or when viewing an existing specification.</p>
                </div>
              </div>
            </div>
            <div class="d-flex gap-2">
              <button type="submit" class="btn btn-primary">Save Settings</button>
              <button type="button" class="btn btn-outline-secondary" id="test-rapid7-connection">Test Connection</button>
              <div id="test-rapid7-result" class="ms-2 d-flex align-items-center"></div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Load Swagger UI libraries with proper event handling
  function loadSwaggerUI() {
    console.log('Loading Swagger UI resources');
    
    // Add Swagger UI CSS
    const swaggerUIStyle = document.createElement('link');
    swaggerUIStyle.rel = 'stylesheet';
    swaggerUIStyle.href = 'https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui.css';
    document.head.appendChild(swaggerUIStyle);
    
    // Create a promise to track when the script is loaded
    window.swaggerUILoaded = new Promise((resolve, reject) => {
      const swaggerUIBundle = document.createElement('script');
      swaggerUIBundle.src = 'https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-bundle.js';
      swaggerUIBundle.onload = () => {
        console.log('Swagger UI bundle loaded successfully');
        resolve();
      };
      swaggerUIBundle.onerror = (error) => {
        console.error('Failed to load Swagger UI bundle:', error);
        reject(error);
      };
      document.head.appendChild(swaggerUIBundle);
    });
  }
  
  // Call the function to load Swagger UI resources
  loadSwaggerUI();
  
  document.addEventListener('DOMContentLoaded', function() {
    // Set up Swagger UI instance variable - will be initialized when needed
    let swaggerUIInstance = null;
    
    // Fix tab switching
    const tabs = document.querySelectorAll('#settingsTabs button[data-bs-toggle="tab"]');
    tabs.forEach(tab => {
      tab.addEventListener('shown.bs.tab', function(event) {
        // Force a reflow when tab is shown
        const targetId = event.target.getAttribute('data-bs-target');
        const targetPane = document.querySelector(targetId);
        if (targetPane) {
          targetPane.style.display = 'block';
          // Trigger resize to fix any layout issues
          window.dispatchEvent(new Event('resize'));
        }
        
        // Initialize Swagger UI if switching to Rapid7 tab and not already initialized
        if (targetId === '#rapid7' && document.getElementById('rapid7-swagger-ui').style.display !== 'none') {
          initSwaggerUI();
        }
      });
    });
    
    // Handle LLM provider toggle
    const openaiToggle = document.getElementById('openai-toggle');
    const ollamaToggle = document.getElementById('ollama-toggle');
    
    if (openaiToggle && ollamaToggle) {
      openaiToggle.addEventListener('change', function() {
        if (this.checked) {
          ollamaToggle.checked = false;
        }
      });
      
      ollamaToggle.addEventListener('change', function() {
        if (this.checked) {
          openaiToggle.checked = false;
        }
      });
    }
    
      // Password toggle functionality
    document.querySelectorAll('.password-toggle').forEach(btn => {
      btn.addEventListener('click', function() {
        const target = this.getAttribute('data-target');
        const input = document.getElementById(target);
        
        if (input && input.type === 'password') {
          input.type = 'text';
          this.querySelector('i').classList.remove('fa-eye');
          this.querySelector('i').classList.add('fa-eye-slash');
        } else if (input) {
          input.type = 'password';
          this.querySelector('i').classList.remove('fa-eye-slash');
          this.querySelector('i').classList.add('fa-eye');
        }
      });
    });
  });
  
  // Simple fix to remove unwanted data-component-name attributes
  document.addEventListener('DOMContentLoaded', function() {
    // Add a minimal style to ensure tabs work properly
    const style = document.createElement('style');
    style.textContent = `
      /* Force proper tab visibility */
      .tab-pane:not(.active) { display: none !important; }
    `;
    document.head.appendChild(style);
    
    // Clean up any component attributes
    function cleanupAttributes() {
      document.querySelectorAll('[data-component-name]').forEach(el => {
        el.removeAttribute('data-component-name');
      });
    }
    
    // Run cleanup on page load
    cleanupAttributes();
    
    // Run cleanup whenever a tab is shown
    const tabButtons = document.querySelectorAll('[data-bs-toggle="tab"]');
    tabButtons.forEach(btn => {
      btn.addEventListener('shown.bs.tab', function() {
        cleanupAttributes();
      });
    });
  });
    
    // Test OpenAI connection
    const testOpenAIBtn = document.getElementById('test-openai-connection');
    const testOpenAIResult = document.getElementById('test-openai-result');
    const openaiStatusIndicator = document.querySelector('#openai-tab .status-indicator');
    const openaiStatusText = document.getElementById('openai-status-text');
    
    if (testOpenAIBtn && testOpenAIResult) {
      testOpenAIBtn.addEventListener('click', function() {
        const apiKey = document.getElementById('openai-api-key').value;
        
        if (!apiKey) {
          testOpenAIResult.innerHTML = '<span class="text-danger">API key is required</span>';
          return;
        }
        
        testOpenAIResult.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> Testing connection...';
        
        // Change status indicator to pending
        if (openaiStatusIndicator) {
          openaiStatusIndicator.classList.remove('online', 'offline');
          openaiStatusIndicator.classList.add('pending');
        }
        
        fetch('/api/test-openai', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ apiKey })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            testOpenAIResult.innerHTML = '<span class="text-success"><i class="fas fa-check-circle me-1"></i>Connection successful!</span>';
            
            // Update status indicator
            if (openaiStatusIndicator) {
              openaiStatusIndicator.classList.remove('pending', 'offline');
              openaiStatusIndicator.classList.add('online');
            }
            
            if (openaiStatusText) {
              openaiStatusText.textContent = 'Connected';
              openaiStatusText.className = 'ms-2 text-success';
            }
            
            // If data includes available models, update the model dropdown
            if (data.models && Array.isArray(data.models) && data.models.length > 0) {
              const modelSelect = document.getElementById('openai-model');
              
              // Clear existing options first
              modelSelect.innerHTML = '';
              
              // Add each model as an option
              data.models.forEach(model => {
                const option = document.createElement('option');
                option.value = model.id;
                option.textContent = model.name || model.id;
                
                // Select the current model if it matches
                if (model.id === '<%= openaiModel %>') {
                  option.selected = true;
                }
                
                modelSelect.appendChild(option);
              });
            }
          } else {
            testOpenAIResult.innerHTML = `<span class="text-danger"><i class="fas fa-times-circle me-1"></i>${data.error || 'Connection failed'}</span>`;
            
            // Update status indicator
            if (openaiStatusIndicator) {
              openaiStatusIndicator.classList.remove('pending', 'online');
              openaiStatusIndicator.classList.add('offline');
            }
            
            if (openaiStatusText) {
              openaiStatusText.textContent = 'Disconnected';
              openaiStatusText.className = 'ms-2 text-danger';
            }
          }
        })
        .catch(error => {
          testOpenAIResult.innerHTML = `<span class="text-danger"><i class="fas fa-times-circle me-1"></i>Error: ${error.message}</span>`;
          
          // Update status indicator
          if (openaiStatusIndicator) {
            openaiStatusIndicator.classList.remove('pending', 'online');
            openaiStatusIndicator.classList.add('offline');
          }
          
          if (openaiStatusText) {
            openaiStatusText.textContent = 'Disconnected';
            openaiStatusText.className = 'ms-2 text-danger';
          }
        });
      });
    }
    
    // Test Ollama connection
    const testOllamaBtn = document.getElementById('test-ollama-connection');
    const testOllamaResult = document.getElementById('test-ollama-result');
    const ollamaStatusIndicator = document.querySelector('#ollama-tab .status-indicator');
    const ollamaStatusText = document.getElementById('ollama-status-text');
    
    if (testOllamaBtn && testOllamaResult) {
      testOllamaBtn.addEventListener('click', function() {
        const apiUrl = document.getElementById('ollama-api-url').value;
        
        if (!apiUrl) {
          testOllamaResult.innerHTML = '<span class="text-danger">API URL is required</span>';
          return;
        }
        
        testOllamaResult.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> Testing connection...';
        
        // Change status indicator to pending
        if (ollamaStatusIndicator) {
          ollamaStatusIndicator.classList.remove('online', 'offline');
          ollamaStatusIndicator.classList.add('pending');
        }
        
        fetch('/api/test-ollama', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ apiUrl })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            testOllamaResult.innerHTML = '<span class="text-success"><i class="fas fa-check-circle me-1"></i>Connection successful!</span>';
            
            // Update status indicator
            if (ollamaStatusIndicator) {
              ollamaStatusIndicator.classList.remove('pending', 'offline');
              ollamaStatusIndicator.classList.add('online');
            }
            
            if (ollamaStatusText) {
              ollamaStatusText.textContent = 'Connected';
              ollamaStatusText.className = 'ms-2 text-success';
            }
            
            // Display available models if present
            if (data.models && Array.isArray(data.models) && data.models.length > 0) {
              updateOllamaModelsList(data.models);
            }
          } else {
            testOllamaResult.innerHTML = `<span class="text-danger"><i class="fas fa-times-circle me-1"></i>${data.error || 'Connection failed'}</span>`;
            
            // Update status indicator
            if (ollamaStatusIndicator) {
              ollamaStatusIndicator.classList.remove('pending', 'online');
              ollamaStatusIndicator.classList.add('offline');
            }
            
            if (ollamaStatusText) {
              ollamaStatusText.textContent = 'Disconnected';
              ollamaStatusText.className = 'ms-2 text-danger';
            }
          }
        })
        .catch(error => {
          testOllamaResult.innerHTML = `<span class="text-danger"><i class="fas fa-times-circle me-1"></i>Error: ${error.message}</span>`;
          
          // Update status indicator
          if (ollamaStatusIndicator) {
            ollamaStatusIndicator.classList.remove('pending', 'online');
            ollamaStatusIndicator.classList.add('offline');
          }
          
          if (ollamaStatusText) {
            ollamaStatusText.textContent = 'Disconnected';
            ollamaStatusText.className = 'ms-2 text-danger';
          }
        });
      });
    }
    
    // Refresh Ollama models
    const refreshOllamaModelsBtn = document.getElementById('refresh-ollama-models');
    
    if (refreshOllamaModelsBtn) {
      refreshOllamaModelsBtn.addEventListener('click', function() {
        const apiUrl = document.getElementById('ollama-api-url').value;
        
        if (!apiUrl) {
          testOllamaResult.innerHTML = '<span class="text-danger">API URL is required</span>';
          return;
        }
        
        testOllamaResult.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> Fetching models...';
        
        fetch('/api/ollama/models', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ apiUrl })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success && data.models) {
            testOllamaResult.innerHTML = '<span class="text-success"><i class="fas fa-check-circle me-1"></i>Models refreshed!</span>';
            updateOllamaModelsList(data.models);
          } else {
            testOllamaResult.innerHTML = `<span class="text-danger"><i class="fas fa-times-circle me-1"></i>${data.error || 'Failed to fetch models'}</span>`;
          }
        })
        .catch(error => {
          testOllamaResult.innerHTML = `<span class="text-danger"><i class="fas fa-times-circle me-1"></i>Error: ${error.message}</span>`;
        });
      });
    }
    
    // Function to update Ollama models list
    function updateOllamaModelsList(models) {
      const modelSelect = document.getElementById('ollama-model');
      const modelsContainer = document.getElementById('available-models-container');
      const modelsList = document.getElementById('available-models-list');
      
      if (modelSelect && models.length > 0) {
        // Clear existing options first
        modelSelect.innerHTML = '';
        
        // Add each model as an option
        models.forEach(model => {
          const option = document.createElement('option');
          option.value = model.name;
          option.textContent = model.name;
          
          // Select the current model if it matches
          if (model.name === '<%= ollamaModel %>') {
            option.selected = true;
          }
          
          modelSelect.appendChild(option);
        });
      }
      
      if (modelsContainer && modelsList && models.length > 0) {
        // Show the container
        modelsContainer.style.display = 'block';
        
        // Clear existing list
        modelsList.innerHTML = '';
        
        // Add each model to the list
        models.forEach(model => {
          const item = document.createElement('a');
          item.href = '#';
          item.className = 'list-group-item list-group-item-action d-flex justify-content-between align-items-center';
          item.textContent = model.name;
          
          const badge = document.createElement('span');
          badge.className = 'badge bg-primary rounded-pill';
          badge.textContent = formatBytes(model.size);
          
          item.appendChild(badge);
          
          // Select this model when clicked
          item.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Update dropdown selection
            modelSelect.value = model.name;
            
            // Remove active class from all items
            document.querySelectorAll('#available-models-list a').forEach(el => {
              el.classList.remove('active');
            });
            
            // Add active class to this item
            this.classList.add('active');
          });
          
          modelsList.appendChild(item);
        });
      }
    }
    
    // Utility function to format bytes
    function formatBytes(bytes, decimals = 2) {
      if (bytes === 0) return '0 Bytes';
      
      const k = 1024;
      const dm = decimals < 0 ? 0 : decimals;
      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
      
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      
      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
    }
    
    // Setup file upload for Rapid7 OpenAPI specification
    const fileInput = document.getElementById('rapid7-openapi-file');
    const fileDropzone = document.getElementById('rapid7-file-dropzone');
    const fileSelectBtn = document.getElementById('rapid7-file-select-btn');
    const fileRemoveBtn = document.getElementById('rapid7-file-remove-btn');
    const dropzoneText = document.getElementById('rapid7-file-dropzone-text');
    const selectedFileInfo = document.getElementById('rapid7-selected-file-info');
    const selectedFilename = document.getElementById('rapid7-selected-filename');
    const selectedFilesize = document.getElementById('rapid7-selected-filesize');
    const fileViewBtn = document.getElementById('rapid7-file-view-btn');
    const swaggerUI = document.getElementById('rapid7-swagger-ui');
    const swaggerPlaceholder = document.getElementById('rapid7-swagger-placeholder');
    
    if (fileInput && fileDropzone) {
      // Click on dropzone should trigger file input
      fileDropzone.addEventListener('click', function(e) {
        // Don't trigger if clicking on the remove button
        if (e.target !== fileRemoveBtn && !fileRemoveBtn.contains(e.target)) {
          fileInput.click();
        }
      });
      
      // Click on select button should trigger file input
      if (fileSelectBtn) {
        fileSelectBtn.addEventListener('click', function(e) {
          e.stopPropagation(); // Prevent double activation
          fileInput.click();
        });
      }
      
      // File selected via input
      fileInput.addEventListener('change', function() {
        if (this.files && this.files.length > 0) {
          displaySelectedFile(this.files[0]);
        }
      });
      
      // Drag and drop functionality
      fileDropzone.addEventListener('dragover', function(e) {
        e.preventDefault();
        e.stopPropagation();
        this.classList.add('border-primary');
      });
      
      fileDropzone.addEventListener('dragleave', function(e) {
        e.preventDefault();
        e.stopPropagation();
        this.classList.remove('border-primary');
      });
      
      fileDropzone.addEventListener('drop', function(e) {
        e.preventDefault();
        e.stopPropagation();
        this.classList.remove('border-primary');
        
        if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
          fileInput.files = e.dataTransfer.files;
          displaySelectedFile(e.dataTransfer.files[0]);
        }
      });
      
      // Remove selected file
      if (fileRemoveBtn) {
        fileRemoveBtn.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          clearSelectedFile();
        });
      }
      
      // View existing OpenAPI spec
      if (fileViewBtn) {
        fileViewBtn.addEventListener('click', function(e) {
          e.preventDefault();
          // Show the Swagger UI and hide placeholder
          swaggerUI.style.display = 'block';
          swaggerPlaceholder.style.display = 'none';
          // Initialize Swagger UI with the existing spec
          loadExistingOpenAPISpec();
        });
      }
    }
    
    // Function to display selected file info
    function displaySelectedFile(file) {
      console.log('File selected:', file.name, file.type, formatBytes(file.size));
      
      // Update UI to show selected file
      dropzoneText.style.display = 'none';
      selectedFileInfo.classList.remove('d-none');
      selectedFilename.textContent = file.name;
      selectedFilesize.textContent = formatBytes(file.size);
      
      // If it's a JSON or YAML file, preview it in Swagger UI
      if (file.name.endsWith('.json') || file.name.endsWith('.yaml') || file.name.endsWith('.yml')) {
        console.log('Processing OpenAPI spec file');
        
        // Read the file and initialize Swagger UI
        const reader = new FileReader();
        reader.onload = function(e) {
          console.log('File loaded, content length:', e.target.result.length);
          try {
            const format = file.name.endsWith('.json') ? 'json' : 'yaml';
            console.log('Initializing Swagger UI with format:', format);
            initSwaggerUIWithSpec(e.target.result, format);
          } catch (error) {
            console.error('Error handling OpenAPI spec:', error);
            const swaggerUIElement = document.getElementById('rapid7-swagger-ui');
            if (swaggerUIElement) {
              swaggerUIElement.style.display = 'block';
              document.getElementById('rapid7-swagger-placeholder').style.display = 'none';
              swaggerUIElement.innerHTML = `<div class="p-3 text-danger">Error parsing OpenAPI specification: ${error.message}</div>`;
            }
          }
        };
        reader.readAsText(file);
      }
    }
    
    // Function to clear selected file
    function clearSelectedFile() {
      fileInput.value = '';
      dropzoneText.style.display = 'block';
      selectedFileInfo.classList.add('d-none');
      
      const swaggerUIElement = document.getElementById('rapid7-swagger-ui');
      const swaggerPlaceholderElement = document.getElementById('rapid7-swagger-placeholder');
      
      if (swaggerUIElement && swaggerPlaceholderElement) {
        swaggerUIElement.style.display = 'none';
        swaggerPlaceholderElement.style.display = 'flex';
      }
    }
    
    // Function to load existing OpenAPI spec from the server
    function loadExistingOpenAPISpec() {
      fetch('/api/rapid7/openapi-spec')
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP error ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          if (data.success && data.spec) {
            initSwaggerUIWithSpec(data.spec, data.format || 'json');
          } else {
            throw new Error(data.error || 'Failed to load OpenAPI specification');
          }
        })
        .catch(error => {
          console.error('Error loading OpenAPI spec:', error);
          swaggerUI.innerHTML = `<div class="p-3 text-danger">Error loading OpenAPI specification: ${error.message}</div>`;
        });
    }
    
    // Function to initialize Swagger UI with the provided spec
    function initSwaggerUIWithSpec(spec, format) {
      console.log('Initializing Swagger UI with spec, format:', format);
      
      // Show the Swagger UI container and hide the placeholder
      const swaggerUIElement = document.getElementById('rapid7-swagger-ui');
      const swaggerPlaceholderElement = document.getElementById('rapid7-swagger-placeholder');
      
      if (!swaggerUIElement || !swaggerPlaceholderElement) {
        console.error('Swagger UI elements not found');
        return;
      }
      
      swaggerUIElement.style.display = 'block';
      swaggerPlaceholderElement.style.display = 'none';
      
      // Temporary loading indicator
      swaggerUIElement.innerHTML = `
        <div class="d-flex justify-content-center align-items-center p-5">
          <div class="spinner-border text-primary me-3" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <div>Loading Swagger UI...</div>
        </div>
      `;
      
      // Parse spec if it's a string
      let specObj;
      if (typeof spec === 'string') {
        try {
          if (format === 'json') {
            specObj = JSON.parse(spec);
          } else {
            // For YAML, we need to use a YAML parser library
            // For simplicity, we'll try to parse as JSON first
            try {
              console.warn('Attempting to parse YAML as JSON');
              specObj = JSON.parse(spec);
            } catch (jsonError) {
              console.error('Could not parse as JSON, YAML parsing requires a dedicated library');
              swaggerUIElement.innerHTML = `<div class="p-3 text-danger">YAML parsing is not supported yet. Please convert your YAML to JSON first.</div>`;
              return;
            }
          }
        } catch (error) {
          console.error('Error parsing spec:', error);
          swaggerUIElement.innerHTML = `<div class="p-3 text-danger">Error parsing specification: ${error.message}</div>`;
          return;
        }
      } else {
        specObj = spec;
      }
      
      // Wait for Swagger UI script to load before initializing
      window.swaggerUILoaded
        .then(() => {
          try {
            console.log('Swagger UI loaded, creating Swagger UI instance with spec');
            
            // Clear existing content
            swaggerUIElement.innerHTML = '';
            
            // Make sure the SwaggerUIBundle is available
            if (typeof SwaggerUIBundle === 'undefined') {
              throw new Error('SwaggerUIBundle is not available, script may not have loaded properly');
            }
            
            // Initialize Swagger UI
            window.swaggerUIInstance = SwaggerUIBundle({
              spec: specObj,
              dom_id: '#rapid7-swagger-ui',
              deepLinking: true,
              presets: [
                SwaggerUIBundle.presets.apis,
                SwaggerUIBundle.SwaggerUIStandalonePreset
              ],
              layout: 'BaseLayout',
              requestInterceptor: (req) => {
                // Add API key header to all requests
                const apiKey = document.getElementById('rapid7-api-key').value;
                if (apiKey) {
                  req.headers['X-Api-Key'] = apiKey;
                }
                return req;
              }
            });
            
            console.log('SwaggerUIBundle initialized successfully');
          } catch (error) {
            console.error('Error initializing Swagger UI:', error);
            swaggerUIElement.innerHTML = `<div class="p-3 text-danger">Error initializing Swagger UI: ${error.message}</div>`;
          }
        })
        .catch(error => {
          console.error('Failed to load Swagger UI resources:', error);
          swaggerUIElement.innerHTML = `<div class="p-3 text-danger">Failed to load Swagger UI resources: ${error.message}</div>`;
        });
    }
    
    // Function to initialize Swagger UI (called when tab is shown)
    function initSwaggerUI() {
      // Check if Swagger UI is already displayed
      if (swaggerUI.style.display === 'block') {
        // Check if an OpenAPI spec has already been loaded
        if (window.swaggerUIInstance) {
          return; // Already initialized
        }
        
        // Check if there's an existing spec to load
        const viewBtn = document.getElementById('rapid7-file-view-btn');
        if (viewBtn) {
          loadExistingOpenAPISpec();
        }
      }
    }
    
    // Test Rapid7 connection
    const testRapid7Btn = document.getElementById('test-rapid7-connection');
    const testRapid7Result = document.getElementById('test-rapid7-result');
    const rapid7StatusIndicator = document.querySelector('#rapid7-tab .status-indicator');
    const rapid7StatusText = document.getElementById('rapid7-status-text');
    
    if (testRapid7Btn && testRapid7Result) {
      testRapid7Btn.addEventListener('click', function() {
        const apiKey = document.getElementById('rapid7-api-key').value;
        
        if (!apiKey) {
          testRapid7Result.innerHTML = '<span class="text-danger">API key is required</span>';
          return;
        }
        
        testRapid7Result.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> Testing connection...';
        
        // Change status indicator to pending
        if (rapid7StatusIndicator) {
          rapid7StatusIndicator.classList.remove('online', 'offline');
          rapid7StatusIndicator.classList.add('pending');
        }
        
        fetch('/api/test-rapid7', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ apiKey })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            testRapid7Result.innerHTML = '<span class="text-success"><i class="fas fa-check-circle me-1"></i>Connection successful!</span>';
            
            // Update status indicator
            if (rapid7StatusIndicator) {
              rapid7StatusIndicator.classList.remove('pending', 'offline');
              rapid7StatusIndicator.classList.add('online');
            }
            
            if (rapid7StatusText) {
              rapid7StatusText.textContent = 'Connected';
              rapid7StatusText.className = 'ms-2 text-success';
            }
          } else {
            testRapid7Result.innerHTML = `<span class="text-danger"><i class="fas fa-times-circle me-1"></i>${data.error || 'Connection failed'}</span>`;
            
            // Update status indicator
            if (rapid7StatusIndicator) {
              rapid7StatusIndicator.classList.remove('pending', 'online');
              rapid7StatusIndicator.classList.add('offline');
            }
            
            if (rapid7StatusText) {
              rapid7StatusText.textContent = 'Disconnected';
              rapid7StatusText.className = 'ms-2 text-danger';
            }
          }
        })
        .catch(error => {
          testRapid7Result.innerHTML = `<span class="text-danger"><i class="fas fa-times-circle me-1"></i>Error: ${error.message}</span>`;
          
          // Update status indicator
          if (rapid7StatusIndicator) {
            rapid7StatusIndicator.classList.remove('pending', 'online');
            rapid7StatusIndicator.classList.add('offline');
          }
          
          if (rapid7StatusText) {
            rapid7StatusText.textContent = 'Disconnected';
            rapid7StatusText.className = 'ms-2 text-danger';
          }
        });
      });
    }
    
    // Initial page load checks
    document.querySelectorAll('form').forEach(form => {
      // Add submit event listeners to log form submissions
      form.addEventListener('submit', function(event) {
        // Standard form submission
        console.log('Form submitted:', this.id);
      });
    });
  });
</script>

<%- include('./partials/footer.ejs') %>
