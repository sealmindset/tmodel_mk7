<!DOCTYPE html>
<html lang="en">
<%- include('../partials/header.ejs') %>

<div class="container mt-5">
  <div class="row">
    <div class="col-md-8 offset-md-2">
      <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
          <h2 class="mb-0">OpenAI API Test</h2>
        </div>
        <div class="card-body">
          <div class="row mb-4">
            <div class="col-md-6">
              <div class="d-flex align-items-center">
                <h5 class="mb-0 me-2">API Status:</h5>
                <div class="status-indicator <%= apiStatus ? 'online' : 'offline' %>" 
                     data-bs-toggle="tooltip" 
                     title="OpenAI API: <%= apiStatus ? 'Connected' : 'Disconnected' %>">
                </div>
                <div class="ms-2 text-<%= apiStatus ? 'success' : 'danger' %>">
                  <%= apiStatus ? 'Connected' : 'Disconnected' %>
                </div>
              </div>
            </div>
            <div class="col-md-6">
              <div class="d-flex align-items-center">
                <h5 class="mb-0 me-2">API Key:</h5>
                <code><%= apiKey || 'Not set' %></code>
              </div>
            </div>
          </div>

          <% if (messages && messages.length > 0) { %>
            <div class="mb-4">
              <% messages.forEach(function(message) { %>
                <div class="alert alert-<%= message.type %> alert-dismissible fade show" role="alert">
                  <%= message.text %>
                  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
              <% }); %>
            </div>
          <% } %>

          <form action="/debug/openai-test" method="POST">
            <div class="mb-3">
              <label for="prompt" class="form-label">Test Prompt</label>
              <textarea class="form-control" id="prompt" name="prompt" rows="4" placeholder="Enter a prompt to test the OpenAI API"><%= typeof lastPrompt !== 'undefined' ? lastPrompt : '' %></textarea>
              <div class="form-text">This prompt will be sent to the OpenAI API to verify connectivity.</div>
            </div>
            <div class="d-grid">
              <button type="submit" class="btn btn-primary" <%= !apiStatus ? 'disabled' : '' %>>
                <i class="bi bi-send"></i> Send Test Prompt
              </button>
            </div>
          </form>
        </div>
      </div>

      <div class="card mt-4 shadow-sm">
        <div class="card-header bg-secondary text-white">
          <h3 class="mb-0">Recent API Events</h3>
        </div>
        <div class="card-body">
          <div class="mb-3">
            <button class="btn btn-sm btn-outline-primary" id="refreshEventsBtn">
              <i class="bi bi-arrow-clockwise"></i> Refresh Events
            </button>
            <button class="btn btn-sm btn-outline-secondary ms-2" id="openEventsModalBtn">
              <i class="bi bi-fullscreen"></i> Open in Modal
            </button>
          </div>
          <div id="eventsContainer" class="border rounded p-3" style="max-height: 300px; overflow-y: auto;">
            <div class="text-center py-5" id="noEventsMsg">
              <i class="bi bi-hourglass text-muted" style="font-size: 2rem;"></i>
              <p class="mt-3 text-muted">No API events recorded yet.</p>
            </div>
            <div id="eventsList"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const eventsContainer = document.getElementById('eventsContainer');
    const eventsList = document.getElementById('eventsList');
    const noEventsMsg = document.getElementById('noEventsMsg');
    const refreshEventsBtn = document.getElementById('refreshEventsBtn');
    const openEventsModalBtn = document.getElementById('openEventsModalBtn');

    // Function to fetch events
    const fetchEvents = () => {
      if (refreshEventsBtn) {
        refreshEventsBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Loading...';
        refreshEventsBtn.disabled = true;
      }

      fetch('/api/openai/events')
        .then(response => {
          if (!response.ok) {
            throw new Error(`Failed to fetch events: ${response.status}`);
          }
          return response.json();
        })
        .then(events => {
          console.log('Received events:', events ? events.length : 0);
          
          if (!events || events.length === 0) {
            noEventsMsg.classList.remove('d-none');
            eventsList.innerHTML = '';
            return;
          }
          
          noEventsMsg.classList.add('d-none');
          eventsList.innerHTML = '';
          
          // Display the latest 10 events
          const recentEvents = events.slice(0, 10);
          
          recentEvents.forEach(event => {
            const eventEl = document.createElement('div');
            eventEl.className = `p-2 mb-2 border-bottom event-${event.type}`;
            
            let eventContent = '';
            const timestamp = new Date(event.timestamp).toLocaleTimeString();
            
            if (event.type === 'request') {
              const model = event.data.model || 'Unknown';
              const promptPreview = event.data.prompt ? 
                event.data.prompt.substring(0, 50) + (event.data.prompt.length > 50 ? '...' : '') : 
                'No prompt data';
              
              eventContent = `
                <div class="d-flex justify-content-between">
                  <span class="badge bg-primary">Request</span>
                  <small class="text-muted">${timestamp}</small>
                </div>
                <div class="mt-1">
                  <small><strong>Model:</strong> ${model}</small><br>
                  <small><strong>Prompt:</strong> ${promptPreview}</small>
                </div>
              `;
            } else if (event.type === 'response') {
              let responseText = '';
              if (event.data.choices && event.data.choices.length > 0) {
                if (event.data.choices[0].message) {
                  responseText = event.data.choices[0].message.content || '';
                } else {
                  responseText = event.data.choices[0].text || '';
                }
              }
              
              const usage = event.data.usage ? 
                `(${event.data.usage.total_tokens || 0} tokens)` : 
                '';
              
              const responsePreview = responseText ? 
                responseText.substring(0, 50) + (responseText.length > 50 ? '...' : '') : 
                'No response text';
              
              eventContent = `
                <div class="d-flex justify-content-between">
                  <span class="badge bg-success">Response</span>
                  <small class="text-muted">${timestamp}</small>
                </div>
                <div class="mt-1">
                  <small><strong>Response:</strong> ${responsePreview}</small><br>
                  <small><strong>Usage:</strong> ${usage}</small>
                </div>
              `;
            } else if (event.type === 'error') {
              eventContent = `
                <div class="d-flex justify-content-between">
                  <span class="badge bg-danger">Error</span>
                  <small class="text-muted">${timestamp}</small>
                </div>
                <div class="mt-1">
                  <small><strong>Error:</strong> ${event.data.message || 'Unknown error'}</small>
                </div>
              `;
            }
            
            eventEl.innerHTML = eventContent;
            eventsList.appendChild(eventEl);
          });
          
          if (events.length > 10) {
            const moreEl = document.createElement('div');
            moreEl.className = 'text-center mt-2';
            moreEl.innerHTML = `<small class="text-muted">And ${events.length - 10} more events...</small>`;
            eventsList.appendChild(moreEl);
          }
        })
        .catch(error => {
          console.error('Error fetching events:', error);
          eventsList.innerHTML = `
            <div class="alert alert-danger">
              Error loading events: ${error.message}
            </div>
          `;
          noEventsMsg.classList.add('d-none');
        })
        .finally(() => {
          if (refreshEventsBtn) {
            refreshEventsBtn.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Refresh Events';
            refreshEventsBtn.disabled = false;
          }
        });
    };
    
    // Initial fetch
    fetchEvents();
    
    // Set up refresh button
    if (refreshEventsBtn) {
      refreshEventsBtn.addEventListener('click', fetchEvents);
    }
    
    // Set up modal button
    if (openEventsModalBtn) {
      openEventsModalBtn.addEventListener('click', function() {
        if (window.openaiMonitor && typeof window.openaiMonitor.toggle === 'function') {
          window.openaiMonitor.toggle();
        } else {
          alert('OpenAI Monitor modal is not available. Check console for details.');
          console.error('OpenAI Monitor not initialized properly. Make sure openai-monitor.js is loaded.');
        }
      });
    }
  });
</script>

<%- include('../partials/footer.ejs') %>
</html>
