<!-- Threat Suggestions Modal -->
<div class="modal fade" id="threatSuggestionsModal" tabindex="-1" aria-labelledby="threatSuggestionsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-scrollable">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="threatSuggestionsModalLabel">AI Threat Suggestions</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-4">
          <p>Based on analysis of your threat model and similar models in our database, we suggest considering the following additional threats:</p>
          <div class="alert alert-info" id="suggestionAnalysis">
            <p><strong>Analysis:</strong> <span id="analysisText">Loading analysis...</span></p>
          </div>
        </div>
        
        <div class="mb-4">
          <h6>Suggested Threats:</h6>
          <div id="suggestedThreats" class="list-group">
            <!-- Suggestions will be added here dynamically -->
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="applySelectedSuggestions()">
          <i class="bi bi-plus-circle me-1"></i>Add Selected Threats
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Threat Suggestions JavaScript -->
<script>
  // Store threat suggestions
  let threatSuggestions = [];

  function analyzeThreatModel(subjectId) {
    showLoadingModal();
    
    // Reset suggestions
    threatSuggestions = [];
    
    fetch(`/analyze-threats/${subjectId}`)
      .then(response => response.json())
      .then(data => {
        hideLoadingModal();
        
        if (data.success) {
          const analysis = data.analysis;
          
          // Display analysis in the modal
          let analysisText = `Found ${analysis.existingThreats} existing threats. `;
          
          if (analysis.missingCategories.length > 0) {
            analysisText += `Missing categories: ${analysis.missingCategories.join(', ')}. `;
          }
          
          if (analysis.components.length > 0) {
            analysisText += `Identified components: ${analysis.components.join(', ')}. `;
          }
          
          if (analysis.similarSubjects.length > 0) {
            analysisText += `Found ${analysis.similarSubjects.length} similar models for reference.`;
          }
          
          document.getElementById('analysisText').textContent = analysisText;
          
          // Display suggested threats
          displaySuggestedThreats(analysis.suggestions);
          
          // Show the modal
          const modal = new bootstrap.Modal(document.getElementById('threatSuggestionsModal'));
          modal.show();
        } else {
          showAlert('Error analyzing threat model: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        hideLoadingModal();
        console.error('Error analyzing threat model:', error);
        showAlert('Error analyzing threat model. Please try again.');
      });
  }
  
  function displaySuggestedThreats(suggestions) {
    const container = document.getElementById('suggestedThreats');
    container.innerHTML = '';
    
    if (!suggestions || suggestions.length === 0) {
      container.innerHTML = '<div class="alert alert-info">No additional threats suggested.</div>';
      return;
    }
    
    // Store the suggestions for later use
    threatSuggestions = suggestions;
    
    suggestions.forEach((suggestion, index) => {
      const suggestionItem = document.createElement('div');
      suggestionItem.className = 'list-group-item';
      suggestionItem.innerHTML = `
        <div class="d-flex w-100 justify-content-between align-items-start mb-2">
          <div class="form-check">
            <input class="form-check-input suggestion-checkbox" type="checkbox" value="${index}" id="suggestion-${index}" checked>
            <label class="form-check-label fw-bold" for="suggestion-${index}">
              ${suggestion.threat}
            </label>
          </div>
        </div>
        <div class="mb-2 ps-4">
          <p class="mb-1"><strong>Description:</strong> ${suggestion.description}</p>
          <p class="mb-0"><strong>Mitigation:</strong> ${suggestion.mitigation}</p>
        </div>
      `;
      container.appendChild(suggestionItem);
    });
  }
  
  function applySelectedSuggestions() {
    // Get selected suggestions
    const checkboxes = document.querySelectorAll('.suggestion-checkbox:checked');
    const selectedIndices = Array.from(checkboxes).map(cb => parseInt(cb.value));
    
    if (selectedIndices.length === 0) {
      showAlert('Please select at least one suggestion to add.', 'warning');
      return;
    }
    
    const selectedSuggestions = selectedIndices.map(index => threatSuggestions[index]);
    
    // Show loading
    showLoadingModal();
    
    // Apply suggestions to the model
    fetch(`/apply-suggestions/${currentSubjectId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ suggestions: selectedSuggestions }),
    })
      .then(response => response.json())
      .then(data => {
        hideLoadingModal();
        
        if (data.success) {
          // Update the response textarea with the new content
          document.getElementById('response').value = data.updatedResponse;
          
          // Close the modal
          const modal = bootstrap.Modal.getInstance(document.getElementById('threatSuggestionsModal'));
          modal.hide();
          
          // Show success message
          showAlert(`Successfully added ${selectedSuggestions.length} new threat(s)!`, 'success');
        } else {
          showAlert('Error applying suggestions: ' + (data.error || 'Unknown error'));
        }
      })
      .catch(error => {
        hideLoadingModal();
        console.error('Error applying suggestions:', error);
        showAlert('Error applying suggestions. Please try again.');
      });
  }
</script>
