/**
 * Settings Routes
 */
const express = require('express');
const router = express.Router();
const redisUtil = require('../utils/redis');
const openaiUtil = require('../utils/openai');
const ollamaUtil = require('../utils/ollama');
const redisClient = redisUtil.client;

// Import auth middleware
let ensureAuthenticated;
try {
  ensureAuthenticated = require('../auth')(express()).ensureAuthenticated;
} catch (error) {
  console.log('Using direct middleware import for auth');
  ensureAuthenticated = require('../middleware/auth').ensureAuthenticated;
}

// Constants for Redis keys
const OPENAI_API_KEY_REDIS_KEY = 'settings:openai:api_key';
const OPENAI_MODEL_REDIS_KEY = 'settings:openai:api_model'; // Fixed key to match what's used elsewhere
const LLM_PROVIDER_REDIS_KEY = 'settings:llm:provider';
const OLLAMA_MODEL_REDIS_KEY = 'settings:ollama:model'; // Fixed key to match what's used elsewhere

/**
 * Helper function to get the stored OpenAI API key from Redis
 * @returns {Promise<string|null>} The stored API key or null
 */
async function getStoredOpenAIKey() {
  try {
    return await redisClient.get(OPENAI_API_KEY_REDIS_KEY);
  } catch (error) {
    console.error('Error retrieving OpenAI API key:', error);
    return null;
  }
}

/**
 * Helper function to get a value from Redis
 * @param {string} key - The Redis key to retrieve
 * @returns {Promise<string|null>} The stored value or null
 */
async function getRedisValue(key) {
  try {
    return await redisClient.get(key);
  } catch (error) {
    console.error(`Error retrieving value for ${key}:`, error);
    return null;
  }
}

/**
 * Check PostgreSQL connection status
 * @returns {Promise<boolean>} Whether the connection is successful
 */
async function checkPostgresStatus() {
  try {
    const { Pool } = require('pg');
    
    // Get connection details from Redis
    const host = await redisClient.get('settings:postgresql:host') || 'localhost';
    const port = await redisClient.get('settings:postgresql:port') || '5432';
    const database = await redisClient.get('settings:postgresql:database') || 'postgres';
    const user = await redisClient.get('settings:postgresql:user') || 'postgres';
    const password = await redisClient.get('settings:postgresql:password') || '';
    
    // Create a connection pool
    const pool = new Pool({
      host,
      port,
      database,
      user,
      password,
      // Set a short timeout to quickly detect connection issues
      connectionTimeoutMillis: 5000
    });
    
    // Test the connection
    const client = await pool.connect();
    client.release();
    await pool.end();
    
    return true;
  } catch (error) {
    console.error('PostgreSQL connection error:', error);
    return false;
  }
}

// Debug all Redis keys on startup
console.log('Settings.js - Redis key constants:');
console.log('OPENAI_API_KEY_REDIS_KEY:', OPENAI_API_KEY_REDIS_KEY);
console.log('OPENAI_MODEL_REDIS_KEY:', OPENAI_MODEL_REDIS_KEY);
console.log('LLM_PROVIDER_REDIS_KEY:', LLM_PROVIDER_REDIS_KEY);
console.log('OLLAMA_MODEL_REDIS_KEY:', OLLAMA_MODEL_REDIS_KEY);

// Debug endpoint to see all settings in Redis
router.get('/debug', ensureAuthenticated, async (req, res) => {
  try {
    // Get all the settings from Redis
    const keys = [
      LLM_PROVIDER_REDIS_KEY,
      OPENAI_MODEL_REDIS_KEY,
      OLLAMA_MODEL_REDIS_KEY,
      OPENAI_API_KEY_REDIS_KEY
    ];
    
    const values = {};
    for (const key of keys) {
      values[key] = await redisClient.get(key);
    }
    
    // Also get keys using pattern matching
    const allSettingsKeys = await redisClient.keys('settings:*');
    const allSettings = {};
    for (const key of allSettingsKeys) {
      allSettings[key] = await redisClient.get(key);
    }
    
    res.json({
      specificKeys: values,
      allSettings: allSettings,
      processEnv: {
        LLM_PROVIDER: process.env.LLM_PROVIDER,
        OPENAI_MODEL: process.env.OPENAI_MODEL,
        OLLAMA_MODEL: process.env.OLLAMA_MODEL
      }
    });
  } catch (error) {
    console.error('Redis debug error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Get API settings page
router.get('/', ensureAuthenticated, async (req, res) => {
  try {
    // Get service status
    const redisStatus = await checkRedisStatus();
    const openaiStatus = await openaiUtil.checkStatus();
    let ollamaStatus = false;
    let availableOllamaModels = [];
    
    try {
      ollamaStatus = await ollamaUtil.checkStatus();
      if (ollamaStatus) {
        availableOllamaModels = await ollamaUtil.getModels();
      }
    } catch (err) {
      console.error('Error checking Ollama status:', err);
    }
    
    // Get stored settings with debug logging
    console.log('GET /api-settings - Starting to retrieve Redis values');
    let openaiApiKey = await getStoredOpenAIKey() || '';
    console.log('GET /api-settings - Retrieved OpenAI API key - length:', openaiApiKey ? openaiApiKey.length : 0);
    
    // Get each setting with careful error handling to ensure all values are retrieved
    let openaiModel = await redisClient.get(OPENAI_MODEL_REDIS_KEY) || 'gpt-3.5-turbo';
    console.log('GET /api-settings - Raw Redis openaiModel value:', openaiModel, 'from key', OPENAI_MODEL_REDIS_KEY);
    if (!openaiModel) {
      try {
        openaiModel = await redisClient.get('settings:openai:model');
        console.log('GET /api-settings - Fallback key value:', openaiModel, 'from key settings:openai:model');
        
        // If found in the old key, migrate it to the new key
        if (openaiModel) {
          console.log('Migrating value from old key to new key');
          await redisClient.set(OPENAI_MODEL_REDIS_KEY, openaiModel);
        }
      } catch (err) {
        console.error('Error checking fallback Redis key:', err);
      }
    }
    
    // Default as last resort
    openaiModel = openaiModel || 'gpt-3.5-turbo';
    console.log('GET /api-settings - Final openaiModel value to render:', openaiModel);
    
    let llmProvider = 'openai';
    try {
      llmProvider = await getRedisValue(LLM_PROVIDER_REDIS_KEY) || 'openai';
      console.log('GET /api-settings - Retrieved from Redis - llmProvider:', llmProvider);
    } catch (err) {
      console.error('Error getting LLM provider from Redis:', err);
      llmProvider = 'openai';
    }
    llmProvider = llmProvider || 'openai';
    
    // Get the Ollama model from Redis
    let ollamaModel = '';
    try {
      ollamaModel = await getRedisValue(OLLAMA_MODEL_REDIS_KEY) || 'llama3';
      console.log('GET /api-settings - Retrieved from Redis - ollamaModel:', ollamaModel);
    } catch (err) {
      console.error('Error getting Ollama model from Redis:', err);
      ollamaModel = 'llama3';
    }
    ollamaModel = ollamaModel || 'llama3.3';
    
    // Always log all settings for debugging
    console.log('GET /api-settings - Final settings values:');
    console.log('GET /api-settings - Retrieved from Redis - llmProvider:', llmProvider);
    console.log('GET /api-settings - Retrieved from Redis - openaiModel:', openaiModel);
    console.log('GET /api-settings - Retrieved from Redis - ollamaModel:', ollamaModel);
    console.log('GET /api-settings - Process env LLM_PROVIDER:', process.env.LLM_PROVIDER);
    console.log('GET /api-settings - Process env OPENAI_MODEL:', process.env.OPENAI_MODEL);
    console.log('GET /api-settings - Process env OLLAMA_MODEL:', process.env.OLLAMA_MODEL);
    
    // Ensure we have at least one model in the list
    if (availableOllamaModels.length === 0) {
      availableOllamaModels = [{ name: ollamaModel }];
    }
    
    console.log('Available Ollama models:', JSON.stringify(availableOllamaModels));
    // Make sure the saved model is in the exact same format as the models list
    if (availableOllamaModels.length > 0) {
      // Try to find an exact match first
      const exactMatch = availableOllamaModels.find(model => model.name === ollamaModel);
      // If no exact match, look for partial match (e.g., 'llama3.3' vs 'llama3.3:latest')
      if (!exactMatch && ollamaModel) {
        const partialMatch = availableOllamaModels.find(model => 
          model.name.startsWith(ollamaModel) || ollamaModel.startsWith(model.name)
        );
        if (partialMatch) {
          console.log(`Found partial match: ${ollamaModel} => ${partialMatch.name}`);
          ollamaModel = partialMatch.name;
        }
      }
    }
    
    // Rapid7 settings from Redis
    let rapid7ApiUrl = await redisClient.get('settings:rapid7:api_url') || 'http://localhost:3100';
    let rapid7ApiKey = await redisClient.get('settings:rapid7:api_key') || '';
    
    // Ollama API URL from Redis
    let ollamaApiUrl = await redisClient.get('settings:ollama:api_url') || 'http://localhost:11434';
    
    // PostgreSQL settings from Redis or environment variables
    let postgresqlHost = await redisClient.get('settings:postgresql:host') || process.env.POSTGRES_HOST || 'localhost';
    let postgresqlPort = await redisClient.get('settings:postgresql:port') || process.env.POSTGRES_PORT || '5432';
    let postgresqlDatabase = await redisClient.get('settings:postgresql:database') || process.env.POSTGRES_DB || 'tmodel';
    let postgresqlUser = await redisClient.get('settings:postgresql:user') || process.env.POSTGRES_USER || 'postgres';
    let postgresqlPassword = await redisClient.get('settings:postgresql:password') || process.env.POSTGRES_PASSWORD || '';
    let postgresqlStatus = await checkPostgresStatus();
    
    // Redis settings from Redis or environment variables
    let redisHost = await redisClient.get('settings:redis:host') || process.env.REDIS_HOST || 'localhost';
    let redisPort = await redisClient.get('settings:redis:port') || process.env.REDIS_PORT || '6379';
    let redisPassword = await redisClient.get('settings:redis:password') || process.env.REDIS_PASSWORD || '';
    
    // Get message from session if any
    const message = req.session.message;
    req.session.message = null;
    
    res.render('api-settings', {
      openaiApiKey,
      openaiModel,
      openaiStatus,
      redisStatus,
      ollamaStatus,
      ollamaModel,
      ollamaApiUrl,
      llmProvider,
      availableOllamaModels,
      rapid7ApiUrl,
      rapid7ApiKey,
      rapid7Status: false, // Default to false until we implement a proper check
      postgresqlHost,
      postgresqlPort,
      postgresqlDatabase,
      postgresqlUser,
      postgresqlPassword,
      postgresqlStatus,
      redisHost,
      redisPort,
      redisPassword,
      message
    });
  } catch (error) {
    console.error('Error loading API settings:', error);
    res.render('api-settings', {
      openaiApiKey: '',
      openaiModel: 'gpt-3.5-turbo',
      openaiStatus: false,
      redisStatus: false,
      ollamaStatus: false,
      ollamaModel: 'llama3.3',
      ollamaApiUrl: 'http://localhost:11434',
      llmProvider: 'openai',
      availableOllamaModels: [],
      rapid7Status: false,
      rapid7ApiUrl: 'http://localhost:3100',
      rapid7ApiKey: '',
      postgresqlHost: process.env.POSTGRES_HOST || 'localhost',
      postgresqlPort: process.env.POSTGRES_PORT || '5432',
      postgresqlDatabase: process.env.POSTGRES_DB || 'tmodel',
      postgresqlUser: process.env.POSTGRES_USER || 'postgres',
      postgresqlPassword: process.env.POSTGRES_PASSWORD || '',
      postgresqlStatus: false,
      redisHost: process.env.REDIS_HOST || 'localhost',
      redisPort: process.env.REDIS_PORT || '6379',
      redisPassword: process.env.REDIS_PASSWORD || '',
      message: {
        type: 'danger',
        text: 'Error loading settings: ' + error.message
      }
    });
  }
});

// Debug endpoint for directly setting LLM provider in Redis
router.get('/force-provider/:provider', ensureAuthenticated, async (req, res) => {
  try {
    const provider = req.params.provider || 'openai';
    console.log(`Direct setting of LLM provider to ${provider}`);
    
    // Force direct Redis SET operation for the provider
    await redisClient.set(LLM_PROVIDER_REDIS_KEY, provider);
    
    // Verify it was set correctly
    const verifiedProvider = await redisClient.get(LLM_PROVIDER_REDIS_KEY);
    
    res.json({
      success: true,
      requested: provider,
      actual: verifiedProvider,
      redisKey: LLM_PROVIDER_REDIS_KEY
    });
  } catch (error) {
    console.error('Error in direct provider setting:', error);
    res.status(500).json({ error: error.message });
  }
});

// Test endpoint for directly setting OpenAI model
router.get('/set-model/:model', ensureAuthenticated, async (req, res) => {
  try {
    const model = req.params.model || 'gpt-4';
    console.log(`Direct setting of OpenAI model to ${model}`);
    
    // Save directly to Redis
    await redisClient.set(OPENAI_MODEL_REDIS_KEY, model);
    
    // Verify
    const verifiedModel = await redisClient.get(OPENAI_MODEL_REDIS_KEY);
    console.log(`Directly set model: ${model}, verified: ${verifiedModel}`);
    
    // Clean up old keys
    await redisClient.del('settings:openai:model');
    
    res.json({
      success: true,
      model: model,
      verifiedModel: verifiedModel,
      redisKey: OPENAI_MODEL_REDIS_KEY
    });
  } catch (error) {
    console.error('Error in direct model setting:', error);
    res.status(500).json({ error: error.message });
  }
});
router.post('/', ensureAuthenticated, async (req, res) => {
  // Initialize variables
  let connectionValid = false;
  let successMessage = 'Settings saved successfully.';
  const savedSettings = [];
  const logger = require('../utils/logger').forModule('settings');
  
  try {
    // Extract all form values
    const {
      llmProvider,
      openaiApiKey,
      openaiModel,
      ollamaModel,
      rapid7ApiUrl,
      rapid7ApiKey,
      settingsType,
      postgresqlHost,
      postgresqlPort,
      postgresqlDatabase,
      postgresqlUser,
      postgresqlPassword,
      redisHost,
      redisPort,
      redisPassword
    } = req.body;
    
    // Determine the normalized Ollama model to use
    let normalizedOllamaModel = ollamaModel || 'llama3';
    
    // Fix trailing colon if present (common issue when copy-pasting model names)
    if (normalizedOllamaModel && normalizedOllamaModel.endsWith(':')) {
      normalizedOllamaModel = normalizedOllamaModel.slice(0, -1);
    }
    
    // Handle specific settings form submissions
    if (settingsType === 'postgresql') {
      // Process PostgreSQL settings
      try {
        logger.info('Processing PostgreSQL settings');
        
        // Save all PostgreSQL settings to Redis
        await redisUtil.storeRedisValue('settings:postgresql:host', postgresqlHost || 'localhost');
        await redisUtil.storeRedisValue('settings:postgresql:port', postgresqlPort || '5432');
        await redisUtil.storeRedisValue('settings:postgresql:database', postgresqlDatabase || 'tmodel');
        await redisUtil.storeRedisValue('settings:postgresql:user', postgresqlUser || 'postgres');
        
        if (postgresqlPassword) {
          await redisUtil.storeRedisValue('settings:postgresql:password', postgresqlPassword);
        }
        
        successMessage = 'PostgreSQL settings saved successfully.';
        req.flash('success', successMessage);
        return res.redirect('/api-settings#postgresql-tab');
      } catch (error) {
        logger.error('Error saving PostgreSQL settings', error);
        req.flash('error', 'Error saving PostgreSQL settings: ' + error.message);
        return res.redirect('/api-settings#postgresql-tab');
      }
    } else if (settingsType === 'redis') {
      // Process Redis settings
      try {
        logger.info('Processing Redis settings');
        
        // Save all Redis connection settings to Redis
        await redisUtil.storeRedisValue('settings:redis:host', redisHost || 'localhost');
        await redisUtil.storeRedisValue('settings:redis:port', redisPort || '6379');
        
        if (redisPassword) {
          await redisUtil.storeRedisValue('settings:redis:password', redisPassword);
        }
        
        successMessage = 'Redis settings saved successfully.';
        req.flash('success', successMessage);
        return res.redirect('/api-settings#redis-tab');
      } catch (error) {
        logger.error('Error saving Redis settings', error);
        req.flash('error', 'Error saving Redis settings: ' + error.message);
        return res.redirect('/api-settings#redis-tab');
      }
    } else if (settingsType === 'rapid7') {
      // Process Rapid7 settings if provided
      logger.info('Processing Rapid7 settings');
      
      // Determine if this is an AJAX request
      const isAjaxRequest = req.xhr || (req.headers.accept && req.headers.accept.indexOf('json') > -1) || req.get('Content-Type') === 'application/json';

      try {
        let formattedUrl = rapid7ApiUrl;
        
        // Validate Rapid7 API URL format
        if (!rapid7ApiUrl || typeof rapid7ApiUrl !== 'string' || !rapid7ApiUrl.trim()) {
          logger.warn('Rapid7 API URL is empty or invalid');
          req.flash('warning', 'Rapid7 API URL is empty. Using default URL.');
          // Use a default URL
          formattedUrl = 'https://us.api.insight.rapid7.com';
          logger.info('Using default Rapid7 API URL', { url: formattedUrl });
        } else {
          // Format the URL properly
          formattedUrl = rapid7ApiUrl.trim();

          // Add https:// if missing
          if (!formattedUrl.startsWith('http://') && !formattedUrl.startsWith('https://')) {
            formattedUrl = 'https://' + formattedUrl;
            logger.debug('Added https:// to URL', { url: formattedUrl });
          }

          // Remove trailing slash if present
          if (formattedUrl.endsWith('/')) {
            formattedUrl = formattedUrl.slice(0, -1);
            logger.debug('Removed trailing slash from URL', { url: formattedUrl });
          }

          // Validate URL format
          try {
            new URL(formattedUrl);
            logger.debug('Valid URL format', { url: formattedUrl });
          } catch (urlError) {
            logger.error('Invalid URL format', { url: formattedUrl }, urlError);
            req.flash('error', 'Invalid URL format: ' + urlError.message);
            throw new Error('Invalid URL format: ' + urlError.message);
          }
        }

        logger.info('Saving Rapid7 API URL to Redis', { url: formattedUrl });
        try {
          // Use redisUtil.storeRedisValue instead of direct client access
          await redisUtil.storeRedisValue('settings:rapid7:api_url', formattedUrl);
          logger.info('Successfully saved Rapid7 API URL to Redis');
          savedSettings.push('Rapid7 API URL');
        } catch (redisError) {
          logger.error('Redis error saving Rapid7 API URL', null, redisError);
          throw new Error('Database error saving Rapid7 API URL: ' + redisError.message);
        }

        // Save Rapid7 API key with proper validation
        if (!rapid7ApiKey || typeof rapid7ApiKey !== 'string' || !rapid7ApiKey.trim()) {
          logger.warn('Rapid7 API key is empty or invalid');
          // Don't save an empty API key
          req.flash('warning', 'Rapid7 API key is empty. Please provide a valid API key.');
        } else {
          // Ensure we're working with a string
          const apiKeyString = String(rapid7ApiKey).trim();
          
          // Log key details for debugging (without exposing the full key)
          const keyStart = apiKeyString.substring(0, 4);
          const keyEnd = apiKeyString.length > 8 ? apiKeyString.substring(apiKeyString.length - 4) : '****';
          logger.debug('Processing Rapid7 API key', { 
            keyPrefix: keyStart,
            keySuffix: keyEnd,
            keyLength: apiKeyString.length 
          });
          
          // Only check if it's too short
          if (apiKeyString.length < 8) {
            logger.warn('Rapid7 API key is shorter than recommended');
            req.flash('warning', 'Rapid7 API key is shorter than recommended but will be saved.');
          }
          
          logger.info('Saving Rapid7 API key to Redis');
          try {
            // Use redisUtil.storeRedisValue instead of direct client access
            await redisUtil.storeRedisValue('settings:rapid7:api_key', apiKeyString);
            logger.info('Successfully saved Rapid7 API key to Redis');
            savedSettings.push('Rapid7 API Key');
            req.flash('success', 'Rapid7 API key saved successfully.');
          } catch (redisError) {
            logger.error('Redis error saving Rapid7 API key', null, redisError);
            req.flash('error', 'Could not save Rapid7 API key: ' + redisError.message);
            throw new Error('Database error saving Rapid7 API key: ' + redisError.message);
          }
        }

        // For Rapid7 settings, return early response if it's an AJAX request
        if (isAjaxRequest) {
          return res.json({
            success: true,
            message: 'Rapid7 settings saved successfully.',
            savedSettings: savedSettings
          });
        } else {
          req.flash('success', 'Rapid7 settings saved successfully.');
          return res.redirect('/api-settings#rapid7-tab');
        }
      } catch (error) {
        logger.error('Error saving Rapid7 settings', null, error);
        
        // If this was an AJAX request, return JSON
        if (isAjaxRequest) {
          return res.status(500).json({
            success: false,
            message: 'Error saving Rapid7 settings: ' + error.message
          });
        }
        
        // Otherwise redirect back to the settings page with flash message
        req.flash('error', 'Error saving Rapid7 settings: ' + error.message);
        return res.redirect('/api-settings#rapid7-tab');
      }
    }

    // From this point on, we're handling the main settings form (not a specific section)

    // Save the input values to Redis, ensuring we use reliable methods
    // Validate settings first
    if (llmProvider) {
      try {
        await redisClient.set('settings:llm:provider', llmProvider);
        savedSettings.push('LLM Provider');
      } catch (error) {
        logger.error('Error saving LLM provider setting', null, error);
        throw new Error('Failed to save LLM provider setting: ' + error.message);
      }
    }

    // Save OpenAI API key if provided
    if (llmProvider === 'openai' && openaiApiKey && openaiApiKey.trim() !== '') {
      try {
        await redisClient.set('settings:openai:api_key', openaiApiKey);
        savedSettings.push('OpenAI API Key');
      } catch (error) {
        logger.error('Error saving OpenAI API key', null, error);
        throw new Error('Failed to save OpenAI API key: ' + error.message);
      }
    }

    // Save OpenAI model if provided
    if (llmProvider === 'openai' && openaiModel) {
      try {
        await redisClient.set('settings:openai:api_model', openaiModel);
        savedSettings.push('OpenAI Model');
      } catch (error) {
        logger.error('Error saving OpenAI model', null, error);
        throw new Error('Failed to save OpenAI model: ' + error.message);
      }
    }

    // Save Ollama model if provided
    if (llmProvider === 'ollama' && ollamaModel) {
      try {
        await redisClient.set('settings:ollama:model', normalizedOllamaModel);
        savedSettings.push('Ollama Model');
      } catch (error) {
        logger.error('Error saving Ollama model', null, error);
        throw new Error('Failed to save Ollama model: ' + error.message);
      }
    }

    // Update the environment variables to reflect the saved settings
    process.env.LLM_PROVIDER = llmProvider || await redisClient.get('settings:llm:provider') || 'openai';
    
    // Check if this is an API request (Content-Type: application/json or XHR)
    const isApiRequest = req.get('Content-Type') === 'application/json' || req.xhr;
    
    // Build success message
    if (savedSettings.length > 0) {
      successMessage = `Settings saved successfully. Updated: ${savedSettings.join(', ')}.`;
    }
    
    if (isApiRequest) {
      // Return JSON response for API requests
      return res.json({
        success: true,
        message: successMessage,
        connectionValid: connectionValid || false,
        savedSettings: savedSettings
      });
    } else {
      // Set success message in session for web requests
      req.flash('success', successMessage);
      
      // Redirect to settings page
      return res.redirect('/api-settings');
    }
  } catch (error) {
    // Log the error
    logger.error('Error saving settings', null, error);
    
    try {
      // Return appropriate error response based on request type
      if (req.get('Content-Type') === 'application/json' || req.xhr) {
        return res.status(500).json({
          success: false,
          error: error.message || 'An error occurred while saving settings.'
        });
      } else {
        req.flash('error', error.message || 'An error occurred while saving settings.');
        return res.redirect('/api-settings');
      }
    } catch (responseError) {
      // Last resort if we can't even send the error response
      console.error('Critical error sending error response:', responseError);
      res.status(500).end();
    }
  }
});

// Helper function to check Redis status
async function checkRedisStatus() {
  try {
    await redisClient.ping();
    return true;
  } catch (error) {
    return false;
  }
}

// Function to validate strings
function isNonEmptyString(value) {
  return typeof value === 'string' && value.trim() !== '';
}

/**
 * Get the preferred LLM configuration from Redis
 * @returns {Promise<Object>} The preferred LLM configuration
 */
async function getPreferredLLMConfig() {
  try {
    // Get the preferred LLM provider
    const provider = await redisClient.get('settings:llm:provider') || 'openai';
    
    // Get configuration based on the provider
    if (provider === 'openai') {
      const apiKey = await redisClient.get('settings:openai:api_key');
      const model = await redisClient.get('settings:openai:api_model') || 'gpt-3.5-turbo';
      return {
        provider: 'openai',
        apiKey: apiKey,
        model: model
      };
    } else if (provider === 'ollama') {
      const model = await redisClient.get('settings:ollama:model') || 'llama3';
      return {
        provider: 'ollama',
        model: model
      };
    }
    
    // Default configuration
    return {
      provider: 'openai',
      model: 'gpt-3.5-turbo'
    };
  } catch (error) {
    console.error('Error retrieving LLM configuration:', error);
    // Return a default configuration if there's an error
    return {
      provider: 'openai',
      model: 'gpt-3.5-turbo',
      error: error.message
    };
  }
}

module.exports = router;
module.exports.getPreferredLLMConfig = getPreferredLLMConfig;
